%%
%% Optimization based code for flying Pelican
%% The optimization satisfied the velocity constraints
%% It tries to minimize the error of cost function
%%

%%
%% First go to terminal and run following
%% cd rotors_ws
%% source devel/setup.bash
%% roslaunch rotors_gazebo mav_hovering_example.launch mav_name:=pelican
%% Only after running that, you should run this code
%%

clc;
clear all;
close all;

%% Starting ROS connection
rosinit

%% Drone is supposed to reach (dest_x, dest_y, dest_z) in
%% 'n' timesteps with each timestep of duration del_t
%% Version 2 (for higher values of n)
n = 20;      % Number of timesteps
del_t = 1.0; % Time duration for which some command is executed.

%% Destination variables
dest_x = 20;
dest_y = 20;
dest_z = 20;

%% Difference between subsequent velocities
del_Vx = 0.5;
del_Vy = 0.5;
del_Vz = 0.5;

cvx_begin
variables Vx(n) Vy(n) Vz(n)

for i = 1:n
   Px(i)  =  sum(Vx(1:i))*del_t;
   Py(i)  =  sum(Vy(1:i))*del_t;
   Pz(i)  =  sum(Vz(1:i))*del_t;
end

%% Cost function
minimise((Px(n) - dest_x)^2 + (Py(n) - dest_y)^2 + (Pz(n) - dest_z)^2)

%%%%%%%% Constraints %%%%%%%%
Vx >= 0;
Vy >= 0;
Vz >= 0;

%% The velocity during initialization shouldn't be much higher
0 <= Vx(1) <= 0.5;
0 <= Vy(1) <= 0.5;
0 <= Vz(1) <= 0.5;

%% Ensuring that subsequent X vel commands do not have difference more than del_Vx
0 <= Vx(2:n) - Vx(1:n-1) <= del_Vx

%% Ensuring that subsequent Y vel commands do not have difference more than del_Vy
0 <= Vy(2:n) - Vy(1:n-1) <= del_Vy

%% Ensuring that subsequent Z vel commands do not have difference more than del_Vz
0 <= Vz(2:n) - Vz(1:n-1) <= del_Vz

%%%%%%%% Constraints definition over!! %%%%%%%%%
cvx_end


%% Definiting a publisher to publish velocity commands
i = 0;
pub_vel = rospublisher('/pelican/command/pose', 'geometry_msgs/PoseStamped');
msg = rosmessage(pub_vel);
tic;
while(i < n)
    i = i + 1;
    %% defining position where drone is supposed to reach in
    msg.Pose.Position.X = sum(Vx(1:i))*del_t;
    msg.Pose.Position.Y = sum(Vy(1:i))*del_t;
    msg.Pose.Position.Z = sum(Vz(1:i))*del_t;
    send(pub_vel,msg);
    pause(del_t);
    toc

end

t_total = toc;
t_total

pause(10);
%% To get drone back to the origin
msg.Pose.Position.X = 0;
msg.Pose.Position.Y = 0;
msg.Pose.Position.Z = 0;
send(pub_vel,msg);

rosshutdown
